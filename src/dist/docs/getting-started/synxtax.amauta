[[syntax@ref]]
group: getting-started
summary: <md>
> **Amauta** focuses on achieving a simple syntax, with intuitive rules that work in separate contexts.

# Section
*Sections* are the core documentation entity. They define a finite text region that renders in a particular way depending on its type.
e.g.: *Root, Tags, Groups, Content.*

# Base syntax
For **Amauta**, the syntax must be simple and reliable. In 99% of use cases:

| Symbol / Syntax     | Indicates                                          |
|---------------------|----------------------------------------------------|
| `@`                 | typing                                             |
| `?`                 | nullability                                        |
| `#`                 | tagging                                            |
| `[[...]]`           | section block declaration                          |
| `:`                 | description                                        |
| `---`, `<-- -->`    | inline (`---`) and multiline (`<-- -->`) comments  |

# Base rules
There only exists one rule (more of a suggestion) and it comes from experience on how to avoid doing things wrong:

> **We highly encourage avoiding indentation while writing documentation**

We will see later how to approach use cases like nested object declarations.

The real challenge is adapting this to different contextsâ€”creating a section is not the same as defining a 200-response schema. Nevertheless, the same rules apply unless the context justifies a more detailed declaration of intent.

# Headers
Define the beginning of a section. All content below it, until a new header (or EOF) will be treated as content declared by the header.

For example:
```
[[@groups]]
```
Indicates the key-type of an item (`@`) as `groups`. This is a reserved section, since it's identified by the type itself and is required by the linter/renderer to perform operations.
  
```
[[Products@api#public,sales]]
```
Declares:
* A particular name "Products" for this section
* Of type (`@`) `api`
* And tagged (`#`) as `public` and `sales`

This is not a reserved section since the user is allowed to declare it as needed, and not creating it won't block the linter/renderer from performing its operations.

# Fields
Define details on specific attributes, depending on the context where these are declared.

For example:
```toml
[[Products@api#public,sales]]
id@str: Product's id
name@str: Product's name
calories?float#private: Product's caloric content
```

Declares a product's:
* `id`, which is a string (typed by `@`)
* `name`, which also types as string
* And `calories`, typed as an **optional** (`?`) float (real number) and tagged (`#`) as `private`

All of these have their corresponding description, declared after the `:` character.

An equivalent declaration of these 4 lines of doc, but for other protocols would look something like:

```yaml
Products:
  type: object
  properties:
    id:
      type: string
      description: Product's id
    name:
      type: string
      description: Product's name
    calories:
      type: number
      format: float
      description: Product's caloric content
  required:
    - id
    - name
```

Which when scaling to a more complex manifest as a product grows, exemplifies the rule made at the beginning.
</md>
